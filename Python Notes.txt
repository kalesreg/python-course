# Python Notes

## Data Types

### Strings

"This is a character string" 
A string is surrounded by either double or single quotes.

str() # Converts and saves value as a string

'It\'s important to understand escape characters' 
\ is the escape character, which can also be used to split a line of code

a = 'Hello World!\n\n My name is Kaley.' 
Assign a string to a variable with an equal sign.
\n prints a new line in the console

Assign a multiline string to a variable by using three quotes.

string[0:1] # Returns 1st letter
string[1:10:2] # Counts by 2 from 1 to 10. Increments by 1 by default.
Strings are arrays, so can use square brackets to access elements of the string
or loop through the string with for loop.

len() # Returns length of a string

'free' in txt # Use *in* to check if a certain phrase or character is present in a string
'free' not in txt # Use *not in* to check if a certain phrase of character is not presen

capitalize() # Converts the first character to upper case
casefold() # Converts string into lower case
lower() # Converts a string into lower case
swapcase() # Swaps cases, lower case becomes upper and vice versa
title() # Converts the first character of each word to upper case
upper() # Converts a string into upper case

center() # Returns a centered string
ljust() # Returns a left justified version of the string
rjust() # Returns a right justified version of the string

count() # Returns the number of times a specified value occurs in a string
endswith() # Returns true if the string ends with the specified value
find() # Searches the string for specified value and returns the position
index() # Searches the string for a specified value and returns the position
rfind() # Searches the string for a specified value and returns last position
rindex() # Searches the string for a specified value and returns last position
startswith() # Returns true if the string starts with the specified value

encode() # Returns an encoded version of the string

expandtabs() # Sets the tab size of the string

format() # Formats specified values in a string
format_map() # Formats specified values in a string

isalnum() # Returns True if all characters in the string are alphanumeric
isalpha() # Returns True if all characters in the string are in the alphabet
isdecimal() # Returns if all characters in the string are decimals
isdigit() # Returns True if all characters in the string are digits
isidentifier() # Returns True if the string is an identifier
islower() # Returns if all characters in the string are lower case
isnumeric() # Returns True if all characters in the string are numeric
isprintable() # Returns True if all characters in the string are printable
isspace() # Returns True if all characters in the string are whitespaces
istitle() # Returns True if the string follows the rules of a title
isupper() # Returns True if all characters in the string are upper case

join() # Joins the elements of an iterable to the end of the string

lstrip() # Returns a left trim version of the string
rstrip() # Returns a right trim version of the string
strip() # Returns a trimmed version of the string

maketrans() # Returns a translation table to used in translations
translate() # Returns a translated string

partition() # Returns a tuple where the string is parted into three parts
rpartition() # Returns a tuple where the string is parted into three parts
rsplit() # Splits the string at the specified separator and returns list
split() # Splits the string at the specified separator and returns list
splitlines() # Splits the string at line breaks and returns list

replace() # Replace a specified value with a different value

zfill() # Fills the string with a specified number of 0 values at the beginning

### Integers

Integer or Int is a whole number, positive or negative, without decimals.

int() # Converts and saves value as an integer

### Floats

Float is a number, positive or negative, containing one or more decimals.
Can also be scientific numbers with an e to indicate the power of 10.

float() # Converts and saves value as an integer

### Complex Numbers

Complex numbers are written with a j as the imaginary part.

### Booleans

True or False, used to compare values

bool() # Evaluate any value, any string is true except empty strings, any number
is true except 0, any list, tuple, set, and dictionary are true except empty ones

## Math

** # Exponent operator
* # Star is used for multiplication
/ # Forward slash is used for floating point division
// # Two forward slashes are used for floor division or integer division
% # Modulus is used for finding the remainder
+ # Plus sign is used for addition
- # Dash is used for subtraction

Augmented Assignment Operators - variable on left also appears on the right of =
+= so x += 5 is equivalent to x = x + 5
-= so x -= 5 is equivalent to x = x - 5
*= so x *= 5 is equivalent to x = x * 5
/= so x /= 5 is equivalent to x = x / 5
%= so x %= 5 is equivalent to x = x % 5

## Conditions and If Statements

a == b # Equals
a != b # Not Equals
a < b # Less Than
a <= b # Less than or equal to
a > b # Greater than
a >= b # Greater than or equal to

if b > a: 
    print("b is greater than a")
This is an if statement.

if b > a: 
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
The elif keyword is else if, aka if previous condition is false, then try this.

if b > a: 
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
else:
    print("a is greater than b")
The else keyword catches anything which isn't caught by the preceding conditions.

if a > b and c > a:
    print("Both conditions are True")
The and keyword is a logical operator and is used to combine conditional statements.
Th eor keyword is another logical operator.

If statements can be nested inside other if statements.

Pass statement can be used for empty if statements to avoid getting an error.

## Loops

for variable in [val1, val2, etc]:
    statements
This is a for loop. Repitition structure that iterates a specific number of times.
Use range(start, end, step) to create an iterble object.
Turtle graphics can be used with a for loop to draw designs.

while condition:
    statements
This is a while loop. Repetition structure that repeats while condition is true
Something needs to happen within the while loop to make the condition false.
Infinite loops occur when a loop has no way of stopping.
Input validation often uses a while loop

Nested loop is a loop that is contained inside another loop.

Target variable is used to reference each item in a sequence as the loop iterates.

Sentinel is a special value that marks the end of a sequence and terminates loop.

## Sequence

Sequences are objects that contain multiple items of data.

### Lists
list = [item1, item2, etc.]
Lists are a mutable object that contain multiple data items of different types.
Element is an item in a list. 
Lists can be iterated over using a for loop.
Lists can be concatenated and sliced. 
To create a copy of a list, you must copy each element of the list.

list[start:end]
Slice is a span of items that are taken from a sequence. 
Span is a list from start up to but not including end.

Use list() to convert certain types of objects to lists.

The repetition operator (*) makes multiple copies of a list and joins together.

An index is a number specifying the position of an element in a list.

item in list
Use in operator to determine whether an item is contained in a list.

append(item) # Used to add items to a list
index(item) # Used to determine where an item is located in a list
insert(index, item) # Used to insert item at position index in the list
sort() # Used to sort the elements of the list in ascending order
remove(item) # Removes the first occurrence of item in the list
reverse() # Reverses the order of the elements in the list
del list[i] # Removes an element from a specific index in a list

writelines # Used to save the contents of a list to a file
readlines # Used to read data from a file

### Tuple
tuple_name = (item1, item2)
Tuple is an immutable sequence. Very similar to list just cannot be changed.
Tuples support indexing, len, min, max, slicing, in, +, and *.
Tuples do not support appending, removing, inserting, reversing, or sorting.
Tuples can be processed faster, are safer, and some operations require tuples.

tuple() # Converts list to tuple

## Functions

print() # Prints arguments to console, use commas to concatenate 
input() # Accepts user input from the console based on a prompt
.upper() # Makes the string variable uppercase
import # Used to import packages
len() # Returns the length of a sequence