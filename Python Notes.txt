# Python Notes

## Data Types

### Strings

"This is a character string" 
A string is surrounded by either double or single quotes.

str() # Converts and saves value as a string

'It\'s important to understand escape characters' 
\ is the escape character, which can also be used to split a line of code

a = 'Hello World!\n\n My name is Kaley.' 
Assign a string to a variable with an equal sign.
\n prints a new line in the console

Assign a multiline string to a variable by using three quotes.

string[0:1] # Returns 1st letter
string[1:10:2] # Counts by 2 from 1 to 10. Increments by 1 by default.
Strings are arrays, so can use square brackets to access elements of the string
or loop through the string with for loop.

len() # Returns length of a string

'free' in txt # Use *in* to check if a certain phrase or character is present in a string
'free' not in txt # Use *not in* to check if a certain phrase of character is not presen

capitalize() # Converts the first character to upper case
casefold() # Converts string into lower case
lower() # Converts a string into lower case
swapcase() # Swaps cases, lower case becomes upper and vice versa
title() # Converts the first character of each word to upper case
upper() # Converts a string into upper case

center() # Returns a centered string
ljust() # Returns a left justified version of the string
rjust() # Returns a right justified version of the string

count() # Returns the number of times a specified value occurs in a string
endswith() # Returns true if the string ends with the specified value
find() # Searches the string for specified value and returns the position
index() # Searches the string for a specified value and returns the position
rfind() # Searches the string for a specified value and returns last position
rindex() # Searches the string for a specified value and returns last position
startswith() # Returns true if the string starts with the specified value

encode() # Returns an encoded version of the string

expandtabs() # Sets the tab size of the string

format() # Formats specified values in a string
format_map() # Formats specified values in a string

isalnum() # Returns True if all characters in the string are alphanumeric
isalpha() # Returns True if all characters in the string are in the alphabet
isdecimal() # Returns if all characters in the string are decimals
isdigit() # Returns True if all characters in the string are digits
isidentifier() # Returns True if the string is an identifier
islower() # Returns if all characters in the string are lower case
isnumeric() # Returns True if all characters in the string are numeric
isprintable() # Returns True if all characters in the string are printable
isspace() # Returns True if all characters in the string are whitespaces
istitle() # Returns True if the string follows the rules of a title
isupper() # Returns True if all characters in the string are upper case

join() # Joins the elements of an iterable to the end of the string

lstrip() # Returns a left trim version of the string
rstrip() # Returns a right trim version of the string
strip() # Returns a trimmed version of the string

maketrans() # Returns a translation table to used in translations
translate() # Returns a translated string

partition() # Returns a tuple where the string is parted into three parts
rpartition() # Returns a tuple where the string is parted into three parts
rsplit() # Splits the string at the specified separator and returns list
split() # Splits the string at the specified separator and returns list
splitlines() # Splits the string at line breaks and returns list

replace() # Replace a specified value with a different value

zfill() # Fills the string with a specified number of 0 values at the beginning

### Integers

Integer or Int is a whole number, positive or negative, without decimals.

int() # Converts and saves value as an integer

### Floats

Float is a number, positive or negative, containing one or more decimals.
Can also be scientific numbers with an e to indicate the power of 10.

float() # Converts and saves value as an integer

### Complex Numbers

Complex numbers are written with a j as the imaginary part.

### Booleans

True or False, used to compare values

bool() # Evaluate any value, any string is true except empty strings, any number
is true except 0, any list, tuple, set, and dictionary are true except empty ones

To get a boolean as an input, you would use bool(input()).
For the input, anything entered with result in True. Press enter for False.

### Formatting Codes

Formatting codes are used to format the different data types.

The % symbol tells the interpreter this is the start of a print formatting code
which serves as a placeholder for a variable or literal string that follows in
the parentheses.
The , symbol is used as a concatenation character within the parentheses.

print("The value of my float is %.2f%s" % (a_float, "."))
print("The value of my integer is %d%s" % (an_integer, "."))
print("The value of my string is %s%s\n\n" % (a_string, "."))
print("The value of my boolean is %s%s\n" % (bool(a_boolean), "."))
Use f for float, use d for integer, use s for string.
You can put an integer(d) into a float(f) but don't put a float(f) into 
a integer(d). You can put anything into a s but you can't control decimal 
places.  

print("The value of my float is ", format(a_float, ',.2f'), ".")
This is another way to use format codes using format().

print("%-20s%20s" % ("Types of Data", "Values Entered" ))
print("%-20s%20.2f" % ("A Float", a_float ))
print("%-20s%20d" % ("An Integer", an_integer ))
print("%-20s%20s" % ("A String", a_string))
print("%-20s%20s" % ("A Boolean", a_boolean))
These statements will print out in 2 columns that are 20 characters wide.
The - sets left alignment, don't use the - and you set right alignment.

## Math

** # Exponent operator
* # Star is used for multiplication
/ # Forward slash is used for floating point division
// # Two forward slashes are used for floor division or integer division
% # Modulus is used for finding the remainder
+ # Plus sign is used for addition
- # Dash is used for subtraction

Augmented Assignment Operators - variable on left also appears on the right of =
+= so x += 5 is equivalent to x = x + 5
-= so x -= 5 is equivalent to x = x - 5
*= so x *= 5 is equivalent to x = x * 5
/= so x /= 5 is equivalent to x = x / 5
%= so x %= 5 is equivalent to x = x % 5

## Control Structures

### Conditions and If Statements

a == b # Equals
a != b # Not Equals
a < b # Less Than
a <= b # Less than or equal to
a > b # Greater than
a >= b # Greater than or equal to

if b > a: 
    print("b is greater than a")
This is an if statement.

if b > a: 
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
The elif keyword is else if, aka if previous condition is false, then try this.

if b > a: 
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
else:
    print("a is greater than b")
The else keyword catches anything which isn't caught by the preceding conditions.

if a > b and c > a:
    print("Both conditions are True")
The and keyword is a logical operator and is used to combine conditional statements.
Th eor keyword is another logical operator.

If statements can be nested inside other if statements.

Pass statement can be used for empty if statements to avoid getting an error.

### Loops

for variable in [val1, val2, etc]:
    statements
This is a for loop. Repitition structure that iterates a specific number of times.
Use range(start, end, step) to create an iterble object.
Turtle graphics can be used with a for loop to draw designs.

while condition:
    statements
This is a while loop. Repetition structure that repeats while condition is true
Something needs to happen within the while loop to make the condition false.
Infinite loops occur when a loop has no way of stopping.
Input validation often uses a while loop

Nested loop is a loop that is contained inside another loop.

Target variable is used to reference each item in a sequence as the loop iterates.

Sentinel is a special value that marks the end of a sequence and terminates loop.

## Sequence

Sequences are objects that contain multiple items of data.

### Lists

list = [item1, item2, etc.]

Lists are ordered, changeable, and allow for duplicates.
Element is an item in a list. 
Lists can be iterated over using a for loop.
Lists can be concatenated and sliced. 
To create a copy of a list, you must copy each element of the list.

list[start:end]
Slice is a span of items that are taken from a sequence. 
Span is a list from start up to but not including end.

Use list() to convert certain types of objects to lists.

The repetition operator (*) makes multiple copies of a list and joins together.

An index is a number specifying the position of an element in a list.

item in list
Use in operator to determine whether an item is contained in a list.

append(item) # Used to add items to a list
index(item) # Used to determine where an item is located in a list
insert(index, item) # Used to insert item at position index in the list
sort() # Used to sort the elements of the list in ascending order
remove(item) # Removes the first occurrence of item in the list
reverse() # Reverses the order of the elements in the list
del list[i] # Removes an element from a specific index in a list

writelines # Used to save the contents of a list to a file
readlines # Used to read data from a file

### Tuple

tuple_name = (item1, item2)

Tuples are ordered, unchangeable, and allow duplicates.
Tuples support indexing, len, min, max, slicing, in, +, and *.
Tuples do not support appending, removing, inserting, reversing, or sorting.
Tuples can be processed faster, are safer, and some operations require tuples.

tuple() # Converts list to tuple

fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
(green, yellow, *red) = fruits
Unpacking a tuple allows you to extract the values back into variables.
Use the asterisk to add values to that variable as a list.

tuple3 = tuple1 + tuple2
Join two or more tuples using the + operator.
tuple2 = tuple1 * 2
Multiple the contents of the tuples using the * operator.

count() # Returns the number of times a specified value occurs in a tuple
index() # Searches the tuple for a specified value and returns the position
sorted() # Sorts the elements in order

### Dictionaries

dictionary = {key1:val1, key2:val2}

Dictionary is ordered, changeable, and does not allow duplicates.
Each element consists of a key and a value (as a tuple).

dict() or {} to create empty dictionary.

for loops can iterate over dictionaries.

dictionary[key]
Use the key to retrieve a specific value.
Test whether a key is in a dictionary using in and not in.
dictionary.get(key, default)
Gets a value associated with specified key from the dictionary.
dictionary.items()
Returns all the dictionaries keys and associated values.
dictionary.keys()
Returns all the dictionaries keys as a sequence.
dictionary.pop(key, default)
Returns value associated with specified key and removes that key-value pair
from the dictionary.
dictionary.popitem()
Returns a randomly selected key-value pair and removes that key-value pair
from the dictionary.
dictionary.values()
Returns all the dictionaries values as a sequence.

del dictionary[key]
Used to delete a key-value pair.
dictionary.clear()
Deletes all the elements in a dictionary, leaving it empty.

### Sets

set = {val1, val2, val3}

Set items are unordered, unchangeable, and no duplicates are allowed.

set() # Used to create a set.

for loop can be used to iterate over elements in a set.
The in operator can be used to test whether a value exists in a set.

set.add() # Adds an element to a set
set.update() # Adds a group of elements to a set.
set.remove() # Remove the specified item from the set.
set.discard() # Remove the specified item form the set.
set.clear() # Clears all the elements of the set.

set1.union(set2)
set1 | set2
Union of two sets is a set that contains all the elements of both sets.
set1.intersection(set2)
set1 & set2
Intersection of two sets is a set that contains only the elements found in both sets.
set1.difference(set2)
set1 - set2
Difference of two sets is a set that contains the elements that appear in the
first set but not the second set.
set1.symmetric_difference(set2)
set1 ^ set2
Symmetric difference of two sets is a set that conatins the elements that are
not shared by the two sets.
setA.issubset(setB)
setA <= setB
Used to determine if Set A is a subset of set B, meaning all elements in set A
are included in set B.
setA.issuperset(setB)
setA >= setB
Used to determine whether set A is a superset of Set B, meaning set A contains
all the elements of set B.

## Functions

Functions are a group of statements within a program that performs a specific task.
Modularized program has each task within the program be its own function.
Void function executes the statements and then terminates
Value-Returning function executes its statements and returns a value.
Boolean function returns either True or False.

Menu-driven program displays a list of operations on the screen and allows the user
to select the desired operation. Usually repeats until user quits.

Function definition specifies what a function does:
def function_name():
    statement
    statement
Argument is a piece of data that is sent into a function.
Parameter variable is assigned a value of the argument when the function is called.

A function is executed after it is called.

The main function defines the mainline logic and calls other functions when needed.

Scope defines the part of a program in which a variable may be accessed.
Local variable is assigned a value inside a funciton and can only be 
accessed within the function.
Global vairable is created by assignment statement written outside all functions.

Standard library is the pre-written functions that comes with Python.
Modules are files that stores functions of the standard library.
import # Used to import packages
Dot notation is used for calling a function belonging to a module.
Random module includes library functions for working with random numbers.
math module includes functions that are useful for mathematical calculations.

print() # Prints arguments to console, use commas to concatenate 
input() # Accepts user input from the console based on a prompt
.upper() # Makes the string variable uppercase
len() # Returns the length of a sequence
inspect.getsource() # See the code for an imported function, import inspect

## Files
Data is saved to a file so it can be retrieved and used at a later time.
Three steps when a program uses a file: open, process, and close.
Two types of files: text and binary files.
Two ways to access data stored in file: sqequential and direct access.

Loops are often used to read and write files.
while line != '' is often used.
for line in file_object: iterates over each line in the file.

open(filename, mode) 
Open function used to open a file.
Modes are 'r' (read only), 'w' (write), and 'a' (appending).
When a file is opened in 'w' mode, the file will be overwritten if it exists.
When a file is opened in 'a' mode, the file will not be erased if it exists.

file_variable.write(string)
Write method used to write data to the file.
To start a new line, usually necessary to concatenate a '\n' to data.
Use the + operator in the argument to concatenate.
Numbers must be converted to strings before they are written to file using str().

file_variable.close()
Close method used to close the file object.

file_variable.read()
Read method reads entire file contents into memory. 
File must have be opened first. Contents returned as string.

file_variable.readline()
Readline method reads a line from the file.
Line is returned as a string, including the '\n'.
To remove '\n' from a string, use the rstrip method.
Numbers must be converted from strings to numeric type to perform math operations.

## Exceptions
Exceptions are errors that occur while a program is running.
Traceback is an error message that gives info regarding exception.
Exception handler is code that responds when exceptions are raised
and prevents program from craching.
Exception handler is written as a try/except statement:
try: 
    statements # statements that could result in exception
except exceptionName:
    statements # Handler executes if exception is raised, otherwised skipped
else:
    statements # Else block (optional) only executes if no exception is raised
finally: 
    statements #  (optional) Executes whether exception occurs or not

List of built in exceptions:
https://docs.python.org/3/library/exceptions.html

## Procedural and Object-Oriented Programming

Procedural programming is writing programs made of functions that perform 
specific tasks. Typically used to operate on data items that are separate 
from the procedures. Those data items are then usually passed from one 
procedure to another.

Object-oriented programming focuses on creating objects. An object is an 
entity that contains data and procedures. Procedures are known as methods, 
which perform operations on the data attributes.
Data attributes define the state of an object.
Encapsulation combines data and code into a single object. 
Data hiding is when an object's data attributes are hidden from code outside
the object, so access is restricted to the object's methods.
Object reusability allows for the same object to be used in different programs.
Public methods allow external code to manipulate the object.
Private methods used for object's inner workings.
An object's data attributes should be private. To do this, place two 
underscores (__) in front of the attribute name. Format: __current_minute.
Object's state is the values of the object's attribute at a given moment.
The __str__ method displays the object's state.
UML diagram is standard diagrams for graphically depicting object-oriented 
systems. The general layout is a box divided into three sections. The top 
section is the name of the class. The middle section lists the data attributes.
The bottom section lists the class methods.

Class is code that specifies the data attributes and methods of a particular
type of object. The class definition is a set of statements that define a 
class's methods and data attributes. Format: class Class_name:.
Instance is an object created from a class. There can be many instances of 
one class. Instance attributes belong to a specific instance of a class and 
are created when a method uses the self parameter to create an attribute. If 
many instances of a class are created, each instance would have its own set of 
attributes. 
Classes can be stored in modules. Filename for module must end in .py. 
Modules can be imported to programs that use the class.

Method deinition is like any other python function definition. The self 
parameter is required in every method in the class. It references the specific
object that the method is working on.
Initializer method automatically executes when an instance of the class is 
created. Format: def __init__(self):.
Call the initializer method to create a new instance of a class. Format:
My_instance = Class_Name(). Use dot notation to call any of the class methods
using the created instance. Format: My_instance.method(). 
Class methods can have multiple parameters in addition to self. For __init__,
parameters needed to create an instance of the class. Other parametes may be 
needed to perform required tasks for other methods. 
Accessor methods return a value from a class's attribute without changing it.
Mutator methods store and change the value of a data attribute.
Methods and functions can accept objects as arguments. When passing an object
as an argument, it is actually passing a reference to the object. The 
receiving method or function has access to the actual object so the methods of
the object can be called or changed.

### Inheritance
Inheritance creats an "is a" relationship between clases. An "is a" 
relationship exists when one object is a specialized verion of 
another object.
Superclass (base class) is a general class.
Subclass (derived class) is a specialized class.
To indicate inheritance, the superclass name is placed in parentheses after
sublass name. class Car(Automobile):
The initializer method of a subclass calls the initializer method of a 
superclass and then initializes the unique data attributes.

### Polymorphism
Polymorphism is an object's ability to take different forms. They are able to 
define a method in a superclass and override it in a subclass and to call the
correct version of overridden method depending on the type of object that 
called for it.
AttributeError exception is raised when a method is receiving an object which 
is not an instance of the right class.
isinstance function determines whether object is an instance of a class.
isinstance(object, class)

## GUI Programming
User interface is the part of the computer with which the user interacts.
Command line interface displays a prompt and the user types a command that is
then executed.
Graphical User Interface (GUI) allows users to interact with a program 
through graphical elements on the screen.
Dialog boxes are small windows that display information and allow the user to
perform actions. They are responsible for most of the interaction through GUI.
Users interact with graphical elements such as icons, buttons, and slider bars.
GUI programs are event-driven, meaning the user determines the order in which
things happen. So, the user causes events to take place and the program 
responds to the events.
tkinter module allows for the creation of simple GUI programs.
A widget is a graphical element that the user can interact with or view. 
Tkinter widgets include buttons, checkbutton, entry, menu, scale, etc.

Frame widget is a container that holds other widgets. It is useful for 
organizing and arranging groups of widgets in a window. The contained widgets
are added to the frame widget which contains them.
tkinter.Label(self.top_frame, text ='hi')

Label widget displays a single line of text in a window.
tkinter.Label(self.main_window, text = 'my text')
StringVar class is a tkinter module class that can be used along with Label 
widget to display data. Create StringVar object and then create Label widget
and associate it with the StringVar object. Any value stored in the StringVar
object will automatically be displayed in the Label widget.

Button widget is a widget that the user can click to cause an action to take 
place. Can specify text to appear on face of the button and callback function.
Callback function is a function or method that executes when the user clicks
the button, aka the event handler.

Info dialog box is a dialog box that shows information to the user. Must import
the tkinter.messagebox module. Then, tkinter.messagebox.showinfo(title, message)

Quit button closes the program when the user clicks it. To create a quit button
must create a button widget. Set the root widget's destroy method as the 
callback function. When the user clicks the button the destroy method is called.

Entry widget is a rectangular area that the user can type text into. It is used 
to gather input in a GUI program and is typically followed by a button for 
submitting the data. 

Radio button is a small circle that appears filled when it is selected and 
appears empty when it is deselected.
Radiobutton widgets created using tkinter module's Radiobutton class. 
IntVar class is a tkinter module class that can be used along with 
Radiobutton widgets. Associate group of Radiobutton widgets with the same 
IntVar object, Assign unique integer to each Radiobutton, When a Radiobutton
widgets is selected, its unique integer is stored in the IntVar object.
It can be used to select a default radio button.
You can specify a callback function with Radiobutton widgets by providing
an argument command=self.my_method when creating the Radiobutton widget.
The command will execute immediately when the radio button is selected. It
replaces the need for a user to click OK or submit before determining which
Radiobutton is selected.

Check button is a small box with a label appearing next to it. Users are 
allowed to select any or all of the check buttons that are displayed in a
group (not mutually exclusive). Checkbutton widgets created using tkinter
module's Checkbutton class. Associate different IntVar object with each 
Checkbutton widget.

Canvas widget is a blank, rectangular area that allows you to draw single 2D 
shapes. Use screen coordinate system to specify the location of graphics. 
(0,0) is the top left. Create the main window using 
self.main_window = tkinter.Tk(). Then create the Canvas widget using
self.canvas = tkinger.Canvas(self.main_window, width=100, height=200)
Numerous methods for drawinf shapes including create_line, create_rectangle,
create_oval, create_arc, create_polygon, and create_text.

pack method determines where a widget should be positioned and makes it 
visible when the main window is displayed. It receives an argument to specify

## Serializing Objects

Serializing an object converts an object to a stream of bytes that can be
easily be stored in a file. This is called pickling.

Import pickle module. 
Open file for binary writing.
Call pickle.dump(object, file).
Close the file.

Unpickeling retrieves pickeled object.
import the pickle module.
Open a file for binary writing.
Call the pickle.load(file).
Close the file.